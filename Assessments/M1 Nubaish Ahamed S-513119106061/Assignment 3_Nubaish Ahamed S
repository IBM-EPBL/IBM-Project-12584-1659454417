{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "**1)DOWNLOADING THE DATA SET**\n",
        "\n",
        "**2)LOADING THE DATASET**"
      ],
      "metadata": {
        "id": "fzwGxaIy_7UU"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "id": "u_FeLI5DXYaL",
        "outputId": "5e911168-90cc-4f28-e2c0-64aec997b84a"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-621a7f3e-87bf-4bec-a3a8-18b0f9795310\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-621a7f3e-87bf-4bec-a3a8-18b0f9795310\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving abalone.csv to abalone.csv\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "uploaded=files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "abalone=pd.read_csv('abalone.csv')\n",
        "abalone.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "O_c95InSYKYL",
        "outputId": "ce2b3ca2-8440-4ee7-ac2f-b71025bdf7dd"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Sex  Length  Diameter  Height  Whole weight  Shucked weight  Viscera weight  \\\n",
              "0   M   0.455     0.365   0.095        0.5140          0.2245          0.1010   \n",
              "1   M   0.350     0.265   0.090        0.2255          0.0995          0.0485   \n",
              "2   F   0.530     0.420   0.135        0.6770          0.2565          0.1415   \n",
              "3   M   0.440     0.365   0.125        0.5160          0.2155          0.1140   \n",
              "4   I   0.330     0.255   0.080        0.2050          0.0895          0.0395   \n",
              "\n",
              "   Shell weight  Rings  \n",
              "0         0.150     15  \n",
              "1         0.070      7  \n",
              "2         0.210      9  \n",
              "3         0.155     10  \n",
              "4         0.055      7  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8e51c433-a050-4d23-8d98-c5beaf029574\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sex</th>\n",
              "      <th>Length</th>\n",
              "      <th>Diameter</th>\n",
              "      <th>Height</th>\n",
              "      <th>Whole weight</th>\n",
              "      <th>Shucked weight</th>\n",
              "      <th>Viscera weight</th>\n",
              "      <th>Shell weight</th>\n",
              "      <th>Rings</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>M</td>\n",
              "      <td>0.455</td>\n",
              "      <td>0.365</td>\n",
              "      <td>0.095</td>\n",
              "      <td>0.5140</td>\n",
              "      <td>0.2245</td>\n",
              "      <td>0.1010</td>\n",
              "      <td>0.150</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>M</td>\n",
              "      <td>0.350</td>\n",
              "      <td>0.265</td>\n",
              "      <td>0.090</td>\n",
              "      <td>0.2255</td>\n",
              "      <td>0.0995</td>\n",
              "      <td>0.0485</td>\n",
              "      <td>0.070</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>F</td>\n",
              "      <td>0.530</td>\n",
              "      <td>0.420</td>\n",
              "      <td>0.135</td>\n",
              "      <td>0.6770</td>\n",
              "      <td>0.2565</td>\n",
              "      <td>0.1415</td>\n",
              "      <td>0.210</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>M</td>\n",
              "      <td>0.440</td>\n",
              "      <td>0.365</td>\n",
              "      <td>0.125</td>\n",
              "      <td>0.5160</td>\n",
              "      <td>0.2155</td>\n",
              "      <td>0.1140</td>\n",
              "      <td>0.155</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>I</td>\n",
              "      <td>0.330</td>\n",
              "      <td>0.255</td>\n",
              "      <td>0.080</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.0895</td>\n",
              "      <td>0.0395</td>\n",
              "      <td>0.055</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e51c433-a050-4d23-8d98-c5beaf029574')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8e51c433-a050-4d23-8d98-c5beaf029574 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8e51c433-a050-4d23-8d98-c5beaf029574');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "abalone.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pvFHXFJoYTc6",
        "outputId": "b2672172-38d2-4595-a748-cd2ac6290add"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(4177, 9)"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv(\"/content/abalone.csv\")\n",
        "df.head(5)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "-9ZswQ5Jb0Sm",
        "outputId": "0afd29cb-c467-4281-f10b-48693b853610"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  Sex  Length  Diameter  Height  Whole weight  Shucked weight  Viscera weight  \\\n",
              "0   M   0.455     0.365   0.095        0.5140          0.2245          0.1010   \n",
              "1   M   0.350     0.265   0.090        0.2255          0.0995          0.0485   \n",
              "2   F   0.530     0.420   0.135        0.6770          0.2565          0.1415   \n",
              "3   M   0.440     0.365   0.125        0.5160          0.2155          0.1140   \n",
              "4   I   0.330     0.255   0.080        0.2050          0.0895          0.0395   \n",
              "\n",
              "   Shell weight  Rings  \n",
              "0         0.150     15  \n",
              "1         0.070      7  \n",
              "2         0.210      9  \n",
              "3         0.155     10  \n",
              "4         0.055      7  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-48a5d4b7-6ef6-47de-8a78-69a4f6ab6bfc\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sex</th>\n",
              "      <th>Length</th>\n",
              "      <th>Diameter</th>\n",
              "      <th>Height</th>\n",
              "      <th>Whole weight</th>\n",
              "      <th>Shucked weight</th>\n",
              "      <th>Viscera weight</th>\n",
              "      <th>Shell weight</th>\n",
              "      <th>Rings</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>M</td>\n",
              "      <td>0.455</td>\n",
              "      <td>0.365</td>\n",
              "      <td>0.095</td>\n",
              "      <td>0.5140</td>\n",
              "      <td>0.2245</td>\n",
              "      <td>0.1010</td>\n",
              "      <td>0.150</td>\n",
              "      <td>15</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>M</td>\n",
              "      <td>0.350</td>\n",
              "      <td>0.265</td>\n",
              "      <td>0.090</td>\n",
              "      <td>0.2255</td>\n",
              "      <td>0.0995</td>\n",
              "      <td>0.0485</td>\n",
              "      <td>0.070</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>F</td>\n",
              "      <td>0.530</td>\n",
              "      <td>0.420</td>\n",
              "      <td>0.135</td>\n",
              "      <td>0.6770</td>\n",
              "      <td>0.2565</td>\n",
              "      <td>0.1415</td>\n",
              "      <td>0.210</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>M</td>\n",
              "      <td>0.440</td>\n",
              "      <td>0.365</td>\n",
              "      <td>0.125</td>\n",
              "      <td>0.5160</td>\n",
              "      <td>0.2155</td>\n",
              "      <td>0.1140</td>\n",
              "      <td>0.155</td>\n",
              "      <td>10</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>I</td>\n",
              "      <td>0.330</td>\n",
              "      <td>0.255</td>\n",
              "      <td>0.080</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.0895</td>\n",
              "      <td>0.0395</td>\n",
              "      <td>0.055</td>\n",
              "      <td>7</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-48a5d4b7-6ef6-47de-8a78-69a4f6ab6bfc')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-48a5d4b7-6ef6-47de-8a78-69a4f6ab6bfc button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-48a5d4b7-6ef6-47de-8a78-69a4f6ab6bfc');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**3)VISUALIZATION**\n",
        "\n",
        "**UNIVARIATE ANALYSIS**\n"
      ],
      "metadata": {
        "id": "BaPDphutAqg1"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "df.hist(figsize=(20,10),grid=False,layout=(2,4),bins=30)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 608
        },
        "id": "C5tmgX9-Aosn",
        "outputId": "7775b5eb-e636-4f13-a3d4-caddbc6ef094"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1440x720 with 8 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "plt.figure(figsize=(10,5))\n",
        "sns.countplot(df['Sex'])\n",
        "plt.show"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 409
        },
        "id": "7Hb72tlbboFU",
        "outputId": "8a5d3ae2-3e01-4712-967e-071137147062"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<function matplotlib.pyplot.show(*args, **kw)>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**BIVARIATE ANALYSIS**"
      ],
      "metadata": {
        "id": "3kVnpMQVEelB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(10,5))\n",
        "sns.boxenplot(y=df['Rings'],x=df['Sex'])\n",
        "plt.grid()\n",
        "plt.show()\n",
        "df.groupby('Sex')['Rings'].describe()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 492
        },
        "id": "3EcPzFeDETQ_",
        "outputId": "c4551ada-c6ae-493d-f8d9-2333f9e8b189"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      count       mean       std  min  25%   50%   75%   max\n",
              "Sex                                                         \n",
              "F    1307.0  11.129304  3.104256  5.0  9.0  10.0  12.0  29.0\n",
              "I    1342.0   7.890462  2.511554  1.0  6.0   8.0   9.0  21.0\n",
              "M    1528.0  10.705497  3.026349  3.0  9.0  10.0  12.0  27.0"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eb1f83b5-2dce-4b11-9203-35a888a7ba43\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "      <th>mean</th>\n",
              "      <th>std</th>\n",
              "      <th>min</th>\n",
              "      <th>25%</th>\n",
              "      <th>50%</th>\n",
              "      <th>75%</th>\n",
              "      <th>max</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Sex</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>F</th>\n",
              "      <td>1307.0</td>\n",
              "      <td>11.129304</td>\n",
              "      <td>3.104256</td>\n",
              "      <td>5.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>29.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>I</th>\n",
              "      <td>1342.0</td>\n",
              "      <td>7.890462</td>\n",
              "      <td>2.511554</td>\n",
              "      <td>1.0</td>\n",
              "      <td>6.0</td>\n",
              "      <td>8.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>21.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>M</th>\n",
              "      <td>1528.0</td>\n",
              "      <td>10.705497</td>\n",
              "      <td>3.026349</td>\n",
              "      <td>3.0</td>\n",
              "      <td>9.0</td>\n",
              "      <td>10.0</td>\n",
              "      <td>12.0</td>\n",
              "      <td>27.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eb1f83b5-2dce-4b11-9203-35a888a7ba43')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-eb1f83b5-2dce-4b11-9203-35a888a7ba43 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-eb1f83b5-2dce-4b11-9203-35a888a7ba43');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**MULTIVARIATE ANALYSIS**"
      ],
      "metadata": {
        "id": "nsO2C2AOJIuO"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "var=sns.heatmap(abalone.corr(),annot=True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 339
        },
        "id": "c0N3JXoRJP41",
        "outputId": "246134a9-4bb5-4245-ead7-afda79314343"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**3) DESCRIPTIVE STATISTICS**"
      ],
      "metadata": {
        "id": "5JYCOjMMJoZI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "abalone.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "NQHXQlzhJwRV",
        "outputId": "4cc50112-b042-46a3-f09d-171b8b45f121"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "            Length     Diameter       Height  Whole weight  Shucked weight  \\\n",
              "count  4177.000000  4177.000000  4177.000000   4177.000000     4177.000000   \n",
              "mean      0.523992     0.407881     0.139516      0.828742        0.359367   \n",
              "std       0.120093     0.099240     0.041827      0.490389        0.221963   \n",
              "min       0.075000     0.055000     0.000000      0.002000        0.001000   \n",
              "25%       0.450000     0.350000     0.115000      0.441500        0.186000   \n",
              "50%       0.545000     0.425000     0.140000      0.799500        0.336000   \n",
              "75%       0.615000     0.480000     0.165000      1.153000        0.502000   \n",
              "max       0.815000     0.650000     1.130000      2.825500        1.488000   \n",
              "\n",
              "       Viscera weight  Shell weight        Rings  \n",
              "count     4177.000000   4177.000000  4177.000000  \n",
              "mean         0.180594      0.238831     9.933684  \n",
              "std          0.109614      0.139203     3.224169  \n",
              "min          0.000500      0.001500     1.000000  \n",
              "25%          0.093500      0.130000     8.000000  \n",
              "50%          0.171000      0.234000     9.000000  \n",
              "75%          0.253000      0.329000    11.000000  \n",
              "max          0.760000      1.005000    29.000000  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a5c9214c-8804-4ec6-91c4-0f96db1d9f07\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Length</th>\n",
              "      <th>Diameter</th>\n",
              "      <th>Height</th>\n",
              "      <th>Whole weight</th>\n",
              "      <th>Shucked weight</th>\n",
              "      <th>Viscera weight</th>\n",
              "      <th>Shell weight</th>\n",
              "      <th>Rings</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>4177.000000</td>\n",
              "      <td>4177.000000</td>\n",
              "      <td>4177.000000</td>\n",
              "      <td>4177.000000</td>\n",
              "      <td>4177.000000</td>\n",
              "      <td>4177.000000</td>\n",
              "      <td>4177.000000</td>\n",
              "      <td>4177.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>0.523992</td>\n",
              "      <td>0.407881</td>\n",
              "      <td>0.139516</td>\n",
              "      <td>0.828742</td>\n",
              "      <td>0.359367</td>\n",
              "      <td>0.180594</td>\n",
              "      <td>0.238831</td>\n",
              "      <td>9.933684</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.120093</td>\n",
              "      <td>0.099240</td>\n",
              "      <td>0.041827</td>\n",
              "      <td>0.490389</td>\n",
              "      <td>0.221963</td>\n",
              "      <td>0.109614</td>\n",
              "      <td>0.139203</td>\n",
              "      <td>3.224169</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>0.075000</td>\n",
              "      <td>0.055000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.002000</td>\n",
              "      <td>0.001000</td>\n",
              "      <td>0.000500</td>\n",
              "      <td>0.001500</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>0.450000</td>\n",
              "      <td>0.350000</td>\n",
              "      <td>0.115000</td>\n",
              "      <td>0.441500</td>\n",
              "      <td>0.186000</td>\n",
              "      <td>0.093500</td>\n",
              "      <td>0.130000</td>\n",
              "      <td>8.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>0.545000</td>\n",
              "      <td>0.425000</td>\n",
              "      <td>0.140000</td>\n",
              "      <td>0.799500</td>\n",
              "      <td>0.336000</td>\n",
              "      <td>0.171000</td>\n",
              "      <td>0.234000</td>\n",
              "      <td>9.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>0.615000</td>\n",
              "      <td>0.480000</td>\n",
              "      <td>0.165000</td>\n",
              "      <td>1.153000</td>\n",
              "      <td>0.502000</td>\n",
              "      <td>0.253000</td>\n",
              "      <td>0.329000</td>\n",
              "      <td>11.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>0.815000</td>\n",
              "      <td>0.650000</td>\n",
              "      <td>1.130000</td>\n",
              "      <td>2.825500</td>\n",
              "      <td>1.488000</td>\n",
              "      <td>0.760000</td>\n",
              "      <td>1.005000</td>\n",
              "      <td>29.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a5c9214c-8804-4ec6-91c4-0f96db1d9f07')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a5c9214c-8804-4ec6-91c4-0f96db1d9f07 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a5c9214c-8804-4ec6-91c4-0f96db1d9f07');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**4) MISSING VALUES**"
      ],
      "metadata": {
        "id": "Xf_ctbb2J2-a"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "abalone.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tXbM9QVBYa1l",
        "outputId": "93941fea-9145-4f4e-e095-008f98184fb7"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Sex               0\n",
              "Length            0\n",
              "Diameter          0\n",
              "Height            0\n",
              "Whole weight      0\n",
              "Shucked weight    0\n",
              "Viscera weight    0\n",
              "Shell weight      0\n",
              "Rings             0\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**5) FINDING OUTLIERS AND REPLACING OUTLIERS**"
      ],
      "metadata": {
        "id": "gSyyzpIJKsvw"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(abalone['Rings'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "WFto1jBbK_8L",
        "outputId": "b97e7017-4cd0-441c-9f3c-38d057f92125"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3f34f4c490>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "q=abalone.quantile(q=[0.75,0.5])\n",
        "iqr=q.iloc[0]-q.iloc[1]\n",
        "iqr"
      ],
      "metadata": {
        "id": "h1pTZ4YGXBCu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9c932dfd-2996-4914-8eb3-17fb9b116946"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Length            0.0700\n",
              "Diameter          0.0550\n",
              "Height            0.0250\n",
              "Whole weight      0.3535\n",
              "Shucked weight    0.1660\n",
              "Viscera weight    0.0820\n",
              "Shell weight      0.0950\n",
              "Rings             2.0000\n",
              "dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "l=q.iloc[1]-(1.5*iqr)\n",
        "l['Rings']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9Vs-f57MXZj3",
        "outputId": "99762ba1-c6c3-40a6-cab5-ebe402f528c7"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "6.0"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "u=q.iloc[1]+(1.5*iqr)\n",
        "u['Rings']"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "OgjE6XT8XmJl",
        "outputId": "40d5ea86-2626-4f4e-8a45-bec12074cf96"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "12.0"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "abalone['Rings']=np.where(abalone['Rings']>u['Rings'],u['Rings'],np.where(abalone['Rings']<l['Rings'],l['Rings'],abalone['Rings']))"
      ],
      "metadata": {
        "id": "ULWgNKiHX0Vy"
      },
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(abalone['Rings'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "w98Ld5cGYm90",
        "outputId": "d2cd23bd-de14-4bb9-b1d9-b772cf95f9bd"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variable as a keyword arg: x. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
            "  FutureWarning\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f3f25720510>"
            ]
          },
          "metadata": {},
          "execution_count": 38
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**7) CHECK FOR CATEGORICAL COLUMNS AND PERFORM ENCODING**"
      ],
      "metadata": {
        "id": "nKlqC6RFZpd-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import LabelEncoder,OneHotEncoder\n",
        "from collections import Counter as count\n",
        "le=LabelEncoder()\n",
        "df['Sex']=le.fit_transform(df['Sex'].tolist())\n",
        "transformed_sex_feature=OneHotEncoder().fit_transform(df['Sex'].values.reshape(1,-1)).toarray()\n",
        "df_sex_encoded=pd.DataFrame(transformed_sex_feature,columns=[\"Sex_\"+str(int(i)) for i in range(transformed_sex_feature.shape[1])])\n",
        "df=pd.concat([df,df_sex_encoded],axis=1)\n",
        "df.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "ZI0VPyXyZzrC",
        "outputId": "82807a57-be36-4ae3-de30-3b55a37f2ed3"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   Sex  Length  Diameter  Height  Whole weight  Shucked weight  \\\n",
              "0    2   0.455     0.365   0.095        0.5140          0.2245   \n",
              "1    2   0.350     0.265   0.090        0.2255          0.0995   \n",
              "2    0   0.530     0.420   0.135        0.6770          0.2565   \n",
              "3    2   0.440     0.365   0.125        0.5160          0.2155   \n",
              "4    1   0.330     0.255   0.080        0.2050          0.0895   \n",
              "\n",
              "   Viscera weight  Shell weight  Rings  Sex_0  ...  Sex_4167  Sex_4168  \\\n",
              "0          0.1010         0.150     15    1.0  ...       1.0       1.0   \n",
              "1          0.0485         0.070      7    NaN  ...       NaN       NaN   \n",
              "2          0.1415         0.210      9    NaN  ...       NaN       NaN   \n",
              "3          0.1140         0.155     10    NaN  ...       NaN       NaN   \n",
              "4          0.0395         0.055      7    NaN  ...       NaN       NaN   \n",
              "\n",
              "   Sex_4169  Sex_4170  Sex_4171  Sex_4172  Sex_4173  Sex_4174  Sex_4175  \\\n",
              "0       1.0       1.0       1.0       1.0       1.0       1.0       1.0   \n",
              "1       NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "2       NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "3       NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "4       NaN       NaN       NaN       NaN       NaN       NaN       NaN   \n",
              "\n",
              "   Sex_4176  \n",
              "0       1.0  \n",
              "1       NaN  \n",
              "2       NaN  \n",
              "3       NaN  \n",
              "4       NaN  \n",
              "\n",
              "[5 rows x 12540 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f6f02cb4-e9dc-4f7a-a7cb-a533f8e21918\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Sex</th>\n",
              "      <th>Length</th>\n",
              "      <th>Diameter</th>\n",
              "      <th>Height</th>\n",
              "      <th>Whole weight</th>\n",
              "      <th>Shucked weight</th>\n",
              "      <th>Viscera weight</th>\n",
              "      <th>Shell weight</th>\n",
              "      <th>Rings</th>\n",
              "      <th>Sex_0</th>\n",
              "      <th>...</th>\n",
              "      <th>Sex_4167</th>\n",
              "      <th>Sex_4168</th>\n",
              "      <th>Sex_4169</th>\n",
              "      <th>Sex_4170</th>\n",
              "      <th>Sex_4171</th>\n",
              "      <th>Sex_4172</th>\n",
              "      <th>Sex_4173</th>\n",
              "      <th>Sex_4174</th>\n",
              "      <th>Sex_4175</th>\n",
              "      <th>Sex_4176</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>0.455</td>\n",
              "      <td>0.365</td>\n",
              "      <td>0.095</td>\n",
              "      <td>0.5140</td>\n",
              "      <td>0.2245</td>\n",
              "      <td>0.1010</td>\n",
              "      <td>0.150</td>\n",
              "      <td>15</td>\n",
              "      <td>1.0</td>\n",
              "      <td>...</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>0.350</td>\n",
              "      <td>0.265</td>\n",
              "      <td>0.090</td>\n",
              "      <td>0.2255</td>\n",
              "      <td>0.0995</td>\n",
              "      <td>0.0485</td>\n",
              "      <td>0.070</td>\n",
              "      <td>7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0.530</td>\n",
              "      <td>0.420</td>\n",
              "      <td>0.135</td>\n",
              "      <td>0.6770</td>\n",
              "      <td>0.2565</td>\n",
              "      <td>0.1415</td>\n",
              "      <td>0.210</td>\n",
              "      <td>9</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>0.440</td>\n",
              "      <td>0.365</td>\n",
              "      <td>0.125</td>\n",
              "      <td>0.5160</td>\n",
              "      <td>0.2155</td>\n",
              "      <td>0.1140</td>\n",
              "      <td>0.155</td>\n",
              "      <td>10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>1</td>\n",
              "      <td>0.330</td>\n",
              "      <td>0.255</td>\n",
              "      <td>0.080</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.0895</td>\n",
              "      <td>0.0395</td>\n",
              "      <td>0.055</td>\n",
              "      <td>7</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 12540 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f6f02cb4-e9dc-4f7a-a7cb-a533f8e21918')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f6f02cb4-e9dc-4f7a-a7cb-a533f8e21918 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f6f02cb4-e9dc-4f7a-a7cb-a533f8e21918');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**8)SPLIT THE DATA INTO DEPENDENT AND INDEPENDENT VARIABLES**\n",
        "\n",
        "  **INDEPENDENT VARIABLE**"
      ],
      "metadata": {
        "id": "0Abb1S01bPt0"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x=abalone.iloc[:,1:8]\n",
        "x"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 424
        },
        "id": "KeDFkZ1Nba7T",
        "outputId": "1d11e3f3-6415-4510-c8f4-d8fe56a793f9"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      Length  Diameter  Height  Whole weight  Shucked weight  Viscera weight  \\\n",
              "0      0.455     0.365   0.095        0.5140          0.2245          0.1010   \n",
              "1      0.350     0.265   0.090        0.2255          0.0995          0.0485   \n",
              "2      0.530     0.420   0.135        0.6770          0.2565          0.1415   \n",
              "3      0.440     0.365   0.125        0.5160          0.2155          0.1140   \n",
              "4      0.330     0.255   0.080        0.2050          0.0895          0.0395   \n",
              "...      ...       ...     ...           ...             ...             ...   \n",
              "4172   0.565     0.450   0.165        0.8870          0.3700          0.2390   \n",
              "4173   0.590     0.440   0.135        0.9660          0.4390          0.2145   \n",
              "4174   0.600     0.475   0.205        1.1760          0.5255          0.2875   \n",
              "4175   0.625     0.485   0.150        1.0945          0.5310          0.2610   \n",
              "4176   0.710     0.555   0.195        1.9485          0.9455          0.3765   \n",
              "\n",
              "      Shell weight  \n",
              "0           0.1500  \n",
              "1           0.0700  \n",
              "2           0.2100  \n",
              "3           0.1550  \n",
              "4           0.0550  \n",
              "...            ...  \n",
              "4172        0.2490  \n",
              "4173        0.2605  \n",
              "4174        0.3080  \n",
              "4175        0.2960  \n",
              "4176        0.4950  \n",
              "\n",
              "[4177 rows x 7 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-fddb69db-2f42-42a8-8aff-67232c38f4b8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>Length</th>\n",
              "      <th>Diameter</th>\n",
              "      <th>Height</th>\n",
              "      <th>Whole weight</th>\n",
              "      <th>Shucked weight</th>\n",
              "      <th>Viscera weight</th>\n",
              "      <th>Shell weight</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.455</td>\n",
              "      <td>0.365</td>\n",
              "      <td>0.095</td>\n",
              "      <td>0.5140</td>\n",
              "      <td>0.2245</td>\n",
              "      <td>0.1010</td>\n",
              "      <td>0.1500</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.350</td>\n",
              "      <td>0.265</td>\n",
              "      <td>0.090</td>\n",
              "      <td>0.2255</td>\n",
              "      <td>0.0995</td>\n",
              "      <td>0.0485</td>\n",
              "      <td>0.0700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.530</td>\n",
              "      <td>0.420</td>\n",
              "      <td>0.135</td>\n",
              "      <td>0.6770</td>\n",
              "      <td>0.2565</td>\n",
              "      <td>0.1415</td>\n",
              "      <td>0.2100</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.440</td>\n",
              "      <td>0.365</td>\n",
              "      <td>0.125</td>\n",
              "      <td>0.5160</td>\n",
              "      <td>0.2155</td>\n",
              "      <td>0.1140</td>\n",
              "      <td>0.1550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.330</td>\n",
              "      <td>0.255</td>\n",
              "      <td>0.080</td>\n",
              "      <td>0.2050</td>\n",
              "      <td>0.0895</td>\n",
              "      <td>0.0395</td>\n",
              "      <td>0.0550</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4172</th>\n",
              "      <td>0.565</td>\n",
              "      <td>0.450</td>\n",
              "      <td>0.165</td>\n",
              "      <td>0.8870</td>\n",
              "      <td>0.3700</td>\n",
              "      <td>0.2390</td>\n",
              "      <td>0.2490</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4173</th>\n",
              "      <td>0.590</td>\n",
              "      <td>0.440</td>\n",
              "      <td>0.135</td>\n",
              "      <td>0.9660</td>\n",
              "      <td>0.4390</td>\n",
              "      <td>0.2145</td>\n",
              "      <td>0.2605</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4174</th>\n",
              "      <td>0.600</td>\n",
              "      <td>0.475</td>\n",
              "      <td>0.205</td>\n",
              "      <td>1.1760</td>\n",
              "      <td>0.5255</td>\n",
              "      <td>0.2875</td>\n",
              "      <td>0.3080</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4175</th>\n",
              "      <td>0.625</td>\n",
              "      <td>0.485</td>\n",
              "      <td>0.150</td>\n",
              "      <td>1.0945</td>\n",
              "      <td>0.5310</td>\n",
              "      <td>0.2610</td>\n",
              "      <td>0.2960</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4176</th>\n",
              "      <td>0.710</td>\n",
              "      <td>0.555</td>\n",
              "      <td>0.195</td>\n",
              "      <td>1.9485</td>\n",
              "      <td>0.9455</td>\n",
              "      <td>0.3765</td>\n",
              "      <td>0.4950</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4177 rows × 7 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fddb69db-2f42-42a8-8aff-67232c38f4b8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-fddb69db-2f42-42a8-8aff-67232c38f4b8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-fddb69db-2f42-42a8-8aff-67232c38f4b8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**DEPENDENT VARIABLE**"
      ],
      "metadata": {
        "id": "tLgzyqS_btxC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "y=abalone['Rings']\n",
        "y"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0a74vKr4bseZ",
        "outputId": "835dfb57-a5ab-46eb-fe15-27ed0d4d96d2"
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0       12.0\n",
              "1        7.0\n",
              "2        9.0\n",
              "3       10.0\n",
              "4        7.0\n",
              "        ... \n",
              "4172    11.0\n",
              "4173    10.0\n",
              "4174     9.0\n",
              "4175    10.0\n",
              "4176    12.0\n",
              "Name: Rings, Length: 4177, dtype: float64"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "abalone.Sex=abalone.Sex.map({'M':0,'F':1,'I':2})\n",
        "abalone.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EF-PZyZ76Lja",
        "outputId": "34343766-4e3d-41b9-afe7-66387a5d35dd"
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 4177 entries, 0 to 4176\n",
            "Data columns (total 9 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   Sex             4177 non-null   int64  \n",
            " 1   Length          4177 non-null   float64\n",
            " 2   Diameter        4177 non-null   float64\n",
            " 3   Height          4177 non-null   float64\n",
            " 4   Whole weight    4177 non-null   float64\n",
            " 5   Shucked weight  4177 non-null   float64\n",
            " 6   Viscera weight  4177 non-null   float64\n",
            " 7   Shell weight    4177 non-null   float64\n",
            " 8   Rings           4177 non-null   float64\n",
            "dtypes: float64(8), int64(1)\n",
            "memory usage: 293.8 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**9)SCALING THE INDEPENDENT VARIABLES**"
      ],
      "metadata": {
        "id": "F3a4GcyQdok9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import scale\n",
        "scale(x)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lgymxQn9d1ee",
        "outputId": "32ea312c-6423-4afc-91f0-d8763ac313a4"
      },
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[-0.57455813, -0.43214879, -1.06442415, ..., -0.60768536,\n",
              "        -0.72621157, -0.63821689],\n",
              "       [-1.44898585, -1.439929  , -1.18397831, ..., -1.17090984,\n",
              "        -1.20522124, -1.21298732],\n",
              "       [ 0.05003309,  0.12213032, -0.10799087, ..., -0.4634999 ,\n",
              "        -0.35668983, -0.20713907],\n",
              "       ...,\n",
              "       [ 0.6329849 ,  0.67640943,  1.56576738, ...,  0.74855917,\n",
              "         0.97541324,  0.49695471],\n",
              "       [ 0.84118198,  0.77718745,  0.25067161, ...,  0.77334105,\n",
              "         0.73362741,  0.41073914],\n",
              "       [ 1.54905203,  1.48263359,  1.32665906, ...,  2.64099341,\n",
              "         1.78744868,  1.84048058]])"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**10)SPLIT THE DATA INTO TRAINING AND TESTING**"
      ],
      "metadata": {
        "id": "I6slXs-0eTxJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)"
      ],
      "metadata": {
        "id": "X-fyuksFZ_VH"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(x_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bJD-h8SVaCq9",
        "outputId": "760ac8fd-2030-48d4-a252-fbad55551a7a"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Length  Diameter  Height  Whole weight  Shucked weight  Viscera weight  \\\n",
            "3141   0.180     0.135   0.080        0.0330          0.0145          0.0070   \n",
            "3521   0.215     0.150   0.055        0.0410          0.0150          0.0090   \n",
            "883    0.660     0.530   0.170        1.3905          0.5905          0.2120   \n",
            "3627   0.715     0.525   0.200        1.8900          0.9500          0.4360   \n",
            "2106   0.595     0.455   0.155        1.0410          0.4160          0.2105   \n",
            "...      ...       ...     ...           ...             ...             ...   \n",
            "1033   0.650     0.525   0.185        1.6220          0.6645          0.3225   \n",
            "3264   0.655     0.500   0.140        1.1705          0.5405          0.3175   \n",
            "1653   0.595     0.450   0.145        0.9590          0.4630          0.2065   \n",
            "2607   0.625     0.490   0.165        1.1270          0.4770          0.2365   \n",
            "2732   0.410     0.325   0.110        0.3260          0.1325          0.0750   \n",
            "\n",
            "      Shell weight  \n",
            "3141        0.0100  \n",
            "3521        0.0125  \n",
            "883         0.4530  \n",
            "3627        0.4305  \n",
            "2106        0.3650  \n",
            "...            ...  \n",
            "1033        0.4770  \n",
            "3264        0.2850  \n",
            "1653        0.2535  \n",
            "2607        0.3185  \n",
            "2732        0.1010  \n",
            "\n",
            "[3341 rows x 7 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(x_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "n1WRr_SdaIjX",
        "outputId": "c53dda17-0d13-49ea-f283-f741b64b5bb3"
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "      Length  Diameter  Height  Whole weight  Shucked weight  Viscera weight  \\\n",
            "668    0.550     0.425   0.155        0.9175          0.2775          0.2430   \n",
            "1580   0.500     0.400   0.120        0.6160          0.2610          0.1430   \n",
            "3784   0.620     0.480   0.155        1.2555          0.5270          0.3740   \n",
            "463    0.220     0.165   0.055        0.0545          0.0215          0.0120   \n",
            "2615   0.645     0.500   0.175        1.5105          0.6735          0.3755   \n",
            "...      ...       ...     ...           ...             ...             ...   \n",
            "575    0.610     0.475   0.140        1.1330          0.5275          0.2355   \n",
            "3231   0.410     0.325   0.120        0.3745          0.1580          0.0810   \n",
            "1084   0.445     0.345   0.105        0.4090          0.1675          0.1015   \n",
            "290    0.540     0.435   0.180        0.9960          0.3835          0.2260   \n",
            "2713   0.250     0.175   0.060        0.0635          0.0275          0.0080   \n",
            "\n",
            "      Shell weight  \n",
            "668         0.3350  \n",
            "1580        0.1935  \n",
            "3784        0.3175  \n",
            "463         0.0200  \n",
            "2615        0.3775  \n",
            "...            ...  \n",
            "575         0.3500  \n",
            "3231        0.1250  \n",
            "1084        0.1170  \n",
            "290         0.3250  \n",
            "2713        0.0200  \n",
            "\n",
            "[836 rows x 7 columns]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VumAkCZ5lOSR",
        "outputId": "441d0271-73ff-4568-bccf-95fe7ceb50f0"
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3141     6.0\n",
            "3521     6.0\n",
            "883     12.0\n",
            "3627    10.0\n",
            "2106    12.0\n",
            "        ... \n",
            "1033    10.0\n",
            "3264    12.0\n",
            "1653    10.0\n",
            "2607     9.0\n",
            "2732     8.0\n",
            "Name: Rings, Length: 3341, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mnI3ax3OlWP2",
        "outputId": "c4ec4eed-39e9-4c33-e48a-80c88cecd143"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "668     12.0\n",
            "1580     8.0\n",
            "3784    11.0\n",
            "463      6.0\n",
            "2615    12.0\n",
            "        ... \n",
            "575     11.0\n",
            "3231    12.0\n",
            "1084     7.0\n",
            "290     12.0\n",
            "2713     6.0\n",
            "Name: Rings, Length: 836, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**11)BUILD THE MODEL**"
      ],
      "metadata": {
        "id": "MaVaMsQcfVbS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn import metrics\n",
        "from sklearn import svm\n",
        "from sklearn.svm import SVR"
      ],
      "metadata": {
        "id": "ypkoLPl8aPNP"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "clf=LinearRegression()\n"
      ],
      "metadata": {
        "id": "CLVbs3_tttER"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "**12)TRAINING  THE MODEL**\n",
        "\n",
        "**13)TESTING THE MODEL**"
      ],
      "metadata": {
        "id": "6D_QzeZvix7i"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "clf.fit(x_train,y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6oNEh6RTugNu",
        "outputId": "94358fc8-fa2a-402c-8bf0-5b526f7bb724"
      },
      "execution_count": 72,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "metadata": {},
          "execution_count": 72
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "clf.predict(x_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TzkjRFituxdG",
        "outputId": "89b55163-84bf-4037-bc2a-2d58300f368c"
      },
      "execution_count": 73,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([10.93763821,  9.27391749, 10.2210372 ,  6.23951107, 10.33451111,\n",
              "       10.90301793,  8.18437885,  9.26217905,  8.23584321, 10.91277438,\n",
              "        8.72901421,  6.8773819 ,  8.20826926,  8.9783078 ,  6.33056503,\n",
              "        9.38356306,  7.67535509, 11.46913749, 10.3591952 ,  8.39901975,\n",
              "        7.89187534,  7.39053793,  8.94613434,  7.5630011 ,  9.59619086,\n",
              "       10.28066853,  5.52014515, 11.11203158, 10.18395192, 10.06969646,\n",
              "        7.96760858,  5.52924561, 10.48131205, 11.80393298,  7.98680428,\n",
              "        8.62500685,  8.73359606, 10.08371322,  8.48960104, 10.54338588,\n",
              "       10.39818534,  9.05244507, 10.19445596, 10.25486148, 11.07168055,\n",
              "        8.96509204,  9.44109907, 10.9187036 , 10.58116333,  8.16749554,\n",
              "       10.39914358,  7.76079936,  8.76701226, 11.23597329,  8.97780427,\n",
              "        8.23188743,  6.62403187,  7.51114548,  7.90589332,  7.55471743,\n",
              "        9.75055332,  9.28182681,  9.97489102,  8.46688237,  8.2057224 ,\n",
              "       10.85309753, 11.19794196, 10.98205944,  9.15039862, 12.067999  ,\n",
              "        9.31051789, 13.68616309, 10.23539352,  9.88963325,  9.59157967,\n",
              "        9.15724999,  9.50790715,  9.29266645, 10.32642941,  8.43244692,\n",
              "        9.43018672,  6.78369427,  7.75252653, 10.78424461,  9.70211679,\n",
              "        8.4822712 ,  9.73451696, 11.18374977,  5.77692656,  7.56084032,\n",
              "        9.87483669, 10.05996603,  8.26402087,  5.58285826, 10.2249437 ,\n",
              "        6.80210395,  9.78540602,  7.73702759, 11.38899648, 10.22889071,\n",
              "       10.0342769 , 10.13202142,  9.98331294, 10.29465917,  6.31797483,\n",
              "       10.24183599,  8.26672691,  7.49744818,  7.82775961, 11.4306809 ,\n",
              "        9.82624716, 10.54032907,  9.87281822,  8.70045361, 11.39774802,\n",
              "       10.18424674, 10.95555232, 11.04259642,  5.90313758,  9.47138834,\n",
              "        7.6136787 , 10.3891957 ,  7.51039855,  9.12784906,  9.88084931,\n",
              "       11.10566577, 10.32491894, 10.6924229 ,  8.20674456, 10.24056955,\n",
              "        9.95663182,  8.3696554 ,  9.2019513 , 10.49989399, 10.71490158,\n",
              "       10.25354814,  9.57455662,  9.07978542,  7.75109648, 11.75845188,\n",
              "        9.52538951,  9.64903835,  7.65469693,  8.86775419, 10.45250915,\n",
              "        9.72587231,  9.06483365,  8.27905178,  8.5138598 ,  7.20296964,\n",
              "        9.1447201 , 13.05252243,  7.63171859, 10.48601415,  7.56282395,\n",
              "        7.49016701, 10.58553676,  7.84298804, 11.06759337,  7.64668611,\n",
              "        9.47298299,  7.40705974,  9.82721908, 10.17766536,  6.23494086,\n",
              "       10.92356858,  7.66051653,  7.1438512 , 10.24849373,  9.56043993,\n",
              "        9.18729958,  6.02302261,  8.48709186, 10.11072724, 10.92682327,\n",
              "        9.86214467,  6.47691905,  8.68495625,  7.97771446, 10.31434754,\n",
              "        9.41651332, 10.08513861,  8.65635026,  9.24251644, 10.77578547,\n",
              "        9.69324274,  9.17525984,  8.84625434,  7.30012   ,  8.77858907,\n",
              "       10.01226187,  9.39385788,  9.25622026,  9.94999204,  9.8948641 ,\n",
              "        8.82378856,  8.20522415,  8.80753027,  5.87386718, 12.36162204,\n",
              "        9.00690867,  9.61114939, 12.26208584,  9.38917997,  9.636772  ,\n",
              "       10.85366804,  6.7930453 , 11.20114736,  9.56949037, 10.26120015,\n",
              "        6.48552605,  9.96997794, 10.11696636,  9.73416596, 10.53413862,\n",
              "        9.8784991 ,  9.9066343 , 10.46998819,  6.48193198, 11.38566636,\n",
              "       10.18574725, 11.07460266,  8.54384553,  9.72101008, 10.56223421,\n",
              "       11.33096749, 10.48723316,  9.2821025 , 11.75031965,  9.15815277,\n",
              "        9.20547267,  8.70294521,  6.88051239, 10.83909219,  8.04339655,\n",
              "       10.87450917,  8.62761288,  6.37403335,  8.7415307 ,  9.72796344,\n",
              "        8.81583564,  9.74100794, 10.20869867, 10.09648405,  9.76080647,\n",
              "        9.86229339, 10.65913489,  8.41128646, 10.33042417, 11.89850448,\n",
              "       11.02692655,  8.37767498, 11.14015886,  9.35507851, 10.19244552,\n",
              "        9.87976186,  7.80904149,  9.2060266 ,  9.91949515, 12.26917097,\n",
              "       10.02665322,  8.84129307,  9.97293933,  7.33911521,  9.99740095,\n",
              "        8.66172444,  8.89311938,  7.94402563,  8.12960814,  7.49839844,\n",
              "       10.10949709,  8.58789236,  8.12127315,  8.30165108,  6.99959158,\n",
              "       10.47742294, 11.42376543,  8.74572986,  9.96917496,  9.12088989,\n",
              "        7.50628989, 11.2574692 ,  7.87063178,  9.66116657,  9.97593387,\n",
              "       10.42539626,  8.23833121, 10.29491539,  9.84239267, 11.01407155,\n",
              "        8.34334215,  8.99408074,  6.77908842,  9.4686092 ,  7.67669236,\n",
              "        8.18307453,  7.41041221,  6.71054698,  9.84736844, 12.35757732,\n",
              "        8.84744012,  8.51973291, 11.2505352 ,  9.42006532,  8.7648228 ,\n",
              "        8.93455441,  9.40201708,  9.92756944, 10.27212107,  9.20538181,\n",
              "        9.72321295, 10.25727674,  8.4254472 , 10.20161198, 12.62849352,\n",
              "       10.46717555,  9.17309345,  7.34914489,  8.60089296,  9.73795253,\n",
              "       10.56735101,  9.57135684,  8.94858838, 10.17001283, 10.65850612,\n",
              "        9.38523727,  9.2374877 ,  9.74364575, 12.51709496,  9.6560581 ,\n",
              "        8.85938062, 10.79618614,  5.94992259, 10.63213706,  9.93558553,\n",
              "       10.64443282,  7.39986549,  8.85070421, 10.59320194,  9.91614725,\n",
              "        9.21895547,  9.29136299, 10.16132359, 10.53518812, 10.69297175,\n",
              "        7.8970797 ,  6.76929705, 10.40137982, 10.97331352,  7.85877507,\n",
              "        6.91446658,  9.17999764, 11.12707344, 10.43626801, 10.21683552,\n",
              "        9.32573921, 10.33682327,  9.20352804,  8.48931088,  9.56694343,\n",
              "        8.75486803,  9.68823086,  8.32463388,  9.3189034 ,  9.83864906,\n",
              "        6.64360792,  6.97951031,  9.0662706 ,  8.67712067,  9.60687622,\n",
              "       10.10550474,  7.863104  , 10.67872707,  8.2328494 , 11.55827075,\n",
              "       11.19757337, 11.48565716,  8.2966534 ,  9.81743289,  5.79358948,\n",
              "        8.74392911,  9.71339207,  9.71156446, 11.25029577,  6.80234628,\n",
              "       10.6764525 , 12.86047273,  8.9327975 ,  8.09903047,  7.1787695 ,\n",
              "       12.72395436,  9.61021521,  9.95555264,  9.27218304, 13.10846027,\n",
              "        7.89414407, 10.46996401,  9.06464793, 10.16833085,  9.4547739 ,\n",
              "        8.68859849,  9.17203809,  7.44728948, 11.83018378,  8.57249689,\n",
              "       10.02664535,  6.79110545, 10.87686653, 12.61917185,  9.32238761,\n",
              "        9.29774038,  8.16709256, 10.1438389 , 10.04829942, 11.82162612,\n",
              "       10.1255975 , 11.07210941, 10.42689732, 12.35293552, 10.36566221,\n",
              "        9.11549658,  9.31256691, 10.29716674, 10.57294461,  6.77795482,\n",
              "        9.48248502,  9.70873764, 10.72264573, 10.45795328, 11.37696781,\n",
              "        9.39063644, 10.44425748,  8.88967399, 10.9057943 ,  8.76224163,\n",
              "        8.89209252, 11.12296007,  9.69361651,  9.61975699, 10.29672423,\n",
              "        8.41113548,  7.34729495, 11.18819247,  8.53131065,  7.43829434,\n",
              "        7.66526827, 11.18093132,  6.42237327,  9.64766621, 10.14021006,\n",
              "        5.53994657,  7.44735458,  9.71758104,  7.46028009,  2.83541178,\n",
              "        8.29568301, 10.4864342 ,  9.42201075,  8.8287122 , 10.91736424,\n",
              "        7.93642341, 12.62891463,  8.65483879,  9.98202829,  9.08582939,\n",
              "       11.22938955,  7.26850232, 14.29471602,  9.16923254,  8.64571855,\n",
              "        8.65171221,  9.89747988,  8.22969921, 12.09766266,  8.83897612,\n",
              "        8.87696478,  8.21411099,  8.35125538,  7.81557482, 10.29407255,\n",
              "        9.51434481, 10.86884228,  8.62249449, 10.34575471, 11.73539076,\n",
              "       11.00019252,  9.77350874,  9.31554027,  8.70325094, 10.49724017,\n",
              "        5.73987697,  9.29629511, 10.83857776,  9.95902191,  7.41603617,\n",
              "        7.99896587,  8.01214754,  6.9150135 , 10.57473287,  9.6318002 ,\n",
              "        7.89092174, 11.18331833,  7.68813516, 10.71277818, 10.02282971,\n",
              "        9.9404742 , 10.02833336, 11.47882696,  7.9517837 ,  6.67498929,\n",
              "        9.30106831,  9.32253625, 12.0266873 , 11.72611717,  8.9878775 ,\n",
              "        8.59913978, 10.09881914,  9.89825659, 11.9180858 ,  9.83910117,\n",
              "        9.9365624 ,  9.59493863, 10.22684942,  9.62285823,  7.60422948,\n",
              "       11.32289146,  8.79675461,  9.17249628,  8.9496339 ,  8.80357632,\n",
              "        8.14992048,  8.23014115,  8.37043488,  9.75736174,  6.20432932,\n",
              "        9.67195671, 10.78257066, 11.04465086,  8.50881095, 11.5452801 ,\n",
              "        8.40659656,  9.68723546,  7.95324271, 10.91383738,  7.51999259,\n",
              "       10.10807019,  8.58251903,  8.58900928, 10.11424893,  9.72419419,\n",
              "       10.07361198, 11.6089262 ,  8.38611984, 11.879055  , 10.22321169,\n",
              "        8.29465191,  8.49437894,  9.43450026,  9.86461823,  9.76646366,\n",
              "       10.37728266,  9.53858713, 10.7886738 ,  9.14297203, 10.77690734,\n",
              "        6.57104806,  8.44081021,  8.7901017 ,  9.85551566,  8.33759996,\n",
              "        9.98735427,  8.85616021,  8.8175752 ,  9.51889467,  9.05767469,\n",
              "        8.22418051, 10.15177762,  9.64356818, 10.74054112,  5.76885496,\n",
              "       11.44146421,  6.83756429,  6.50870567,  6.97561005,  8.82795407,\n",
              "        9.21148846, 14.87328123, 10.02763158,  8.9651708 , 10.99073776,\n",
              "        6.6608862 ,  9.2275238 ,  9.91183138,  7.94680981, 10.8914706 ,\n",
              "       10.22894373,  5.46852255,  8.61982746,  7.11938712,  9.80478674,\n",
              "        8.95482941, 11.48303495,  9.8229151 ,  9.44440162, 10.83682558,\n",
              "        9.46379598,  9.75773146,  7.27395899,  9.38604614, 10.7405191 ,\n",
              "        7.93957382, 11.26411109,  9.57575924,  9.04488549,  9.93381919,\n",
              "       11.59855738,  8.807916  ,  8.03109363, 11.9305236 ,  9.88676048,\n",
              "        9.4883048 , 11.02725416,  7.8061059 ,  9.65455579, 10.31678433,\n",
              "       10.26871214,  8.65573855, 11.39338362,  8.70103366,  9.92436163,\n",
              "        9.1217829 ,  7.63983602,  8.19479287,  8.56175812,  8.22705874,\n",
              "        9.56494241,  6.20545549, 12.35517444,  8.99165827,  9.62511754,\n",
              "        9.24980445, 10.37155074, 10.50435076,  9.67055236,  9.64325124,\n",
              "        9.27316491,  7.97223191,  9.48011707, 11.09126673,  9.77140316,\n",
              "        8.05727039,  8.48642418,  8.47807766,  9.46938598,  7.61892341,\n",
              "       11.3193288 ,  8.04326032,  8.45121558, 10.11025995, 11.39535323,\n",
              "        9.68874022,  8.08265205, 11.14481514, 10.09077302, 10.23924667,\n",
              "        8.73643357,  8.98853181,  6.82661507,  7.30047763, 10.10578952,\n",
              "        9.50179022, 11.17601274, 12.31891954, 11.07047639,  6.39767741,\n",
              "        8.02575768,  8.55759465,  6.98060412,  8.22426715, 12.80112059,\n",
              "       11.34177689,  9.35774603, 10.2642952 ,  9.22856772,  9.17018332,\n",
              "        8.14757231, 10.20679026, 10.32685704,  9.90113516, 13.23698542,\n",
              "        9.48011306, 10.50343897, 10.29828754, 11.73282474,  8.45292254,\n",
              "       10.26374385, 12.42375914, 10.87041251,  8.51153814,  8.33651301,\n",
              "        7.58864271, 10.06285954,  9.57789214, 11.15875642,  9.09073011,\n",
              "       10.39685628,  9.33086513,  8.67059849, 11.83650568, 10.65561822,\n",
              "        6.96140756,  5.97883185,  6.6782187 , 10.20184194,  7.94012908,\n",
              "        9.14343133, 10.23933776,  8.88338319,  8.00205427,  8.48645359,\n",
              "       10.90578108,  6.08049555,  9.197395  ,  7.49016095, 11.23068774,\n",
              "        6.6170626 ,  9.24613457,  8.65175366, 10.1449129 , 10.33218809,\n",
              "        8.80129194, 10.57713674, 10.73089054, 11.5746764 ,  8.94363408,\n",
              "        9.8009727 ,  8.45999609,  9.01310869,  8.24097924,  6.8573071 ,\n",
              "       10.43351443,  8.99379031,  7.48320489,  7.75599973,  9.86847272,\n",
              "        7.80384462,  9.51281895,  8.86690544,  8.95512176,  8.85047423,\n",
              "        9.61504325,  9.45595793,  7.72187022, 10.55990716,  8.28820158,\n",
              "       10.82341334,  9.73558383,  7.74800891,  9.22290734, 11.21916582,\n",
              "        7.43921393,  7.18079385,  7.8143189 ,  6.78177345, 10.06158534,\n",
              "        9.40722244, 10.20134612,  8.14543227, 10.46565533,  8.36304913,\n",
              "        7.55296176,  8.81463851, 11.0081931 , 10.13878267,  9.10220154,\n",
              "        9.60864365,  7.68614569, 10.76333057,  7.80062563,  9.72016559,\n",
              "       12.05358732, 10.69579186,  8.18375977,  7.49093469,  8.65265304,\n",
              "        9.23889878,  9.35069698,  8.50755908,  9.86105959, 10.03789214,\n",
              "        9.60132623, 10.18601378, 11.59628729, 10.23205051, 11.02211447,\n",
              "        9.20877014, 10.29600157,  9.63708865,  5.60091817,  9.77537552,\n",
              "        9.09532856,  8.41172726,  8.47382842,  6.8861067 ,  7.31733075,\n",
              "        8.45500308,  9.04903921, 10.58007889,  8.12276111,  8.69613119,\n",
              "        8.85777204,  8.15979155,  9.43326674, 10.5355126 , 10.37864617,\n",
              "        9.29142271,  9.48197019, 10.91461634, 10.43877666,  9.07562207,\n",
              "        6.7960305 ,  9.95238855, 10.21565827,  7.30278271,  8.59229423,\n",
              "        9.02335783, 10.55536918,  9.28619739,  7.27283861,  7.41617734,\n",
              "        9.00848895,  9.99497696,  8.4297333 ,  8.52804454, 10.52019243,\n",
              "        6.35622735])"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\n",
        "model = DecisionTreeRegressor(max_depth=10)\n",
        "# fit the estimator to the data\n",
        "model.fit(x_train,y_train)\n",
        "# apply the model to the test and train data\n",
        "predicted_y_train = model.predict(x_train)\n",
        "predicted_y_train= model.predict(x_train)"
      ],
      "metadata": {
        "id": "RnGbXjPhhgv-"
      },
      "execution_count": 55,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import accuracy_score\n",
        "# Select algorithm\n",
        "model = DecisionTreeClassifier()\n",
        "# Fit model to the data\n",
        "model.fit(x_train, y_train)\n",
        "# Check model performance on training data\n",
        "predictions = model.predict(x_train)\n",
        "print(accuracy_score(y_train, predictions))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KIsqJid3pOSz",
        "outputId": "60576c9a-df8d-433f-d975-8fefa79cfed3"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**14)MEASURE THE PERFORMANCE USING METRICS**"
      ],
      "metadata": {
        "id": "IXD_r47ufFQh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "metrics.accuracy_score(pred,y_test)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a6P2GLhtfRCG",
        "outputId": "0119b0ca-9389-46a1-8f6c-ce650df6ec73"
      },
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.43899521531100477"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(metrics.classification_report(y_test,pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bS6eLKrXeSaQ",
        "outputId": "759cbcf5-d908-4779-9a5b-2f44258f68bd"
      },
      "execution_count": 48,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "         6.0       0.58      0.83      0.68        96\n",
            "         7.0       0.37      0.20      0.26        98\n",
            "         8.0       0.34      0.49      0.40       113\n",
            "         9.0       0.32      0.45      0.38       127\n",
            "        10.0       0.31      0.13      0.18       107\n",
            "        11.0       0.00      0.00      0.00        95\n",
            "        12.0       0.54      0.70      0.61       200\n",
            "\n",
            "    accuracy                           0.44       836\n",
            "   macro avg       0.35      0.40      0.36       836\n",
            "weighted avg       0.37      0.44      0.39       836\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ]
    }
  ]
}